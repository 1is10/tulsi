#!/usr/bin/python
# Copyright 2016 The Tulsi Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Bridge between Xcode and Bazel for the "build" action.

NOTE: This script must be executed in the same directory as the Xcode project's
main group in order to generate correct debug symbols.
"""

import collections
import os
import re
import shutil
import subprocess
import sys
import tempfile
import textwrap
import time
import zipfile


class Timer(object):
  """Simple profiler."""

  def __init__(self, action_name):
    self.action_name = action_name
    self._start = None

  def Start(self):
    self._start = time.time()
    return self

  def End(self):
    end = time.time()
    seconds = end - self._start
    print '<*> %s completed in %0.3f ms' % (self.action_name, seconds * 1000)


class _OptionsParser(object):
  """Handles parsing script options."""

  # Key for options that should be applied to all build configurations.
  ALL_CONFIGS = '__all__'

  # The build configurations handled by this parser.
  KNOWN_CONFIGS = ['Debug', 'Release', 'Fastbuild']

  def __init__(self, sdk_version, platform_name, arch, main_group_path):
    self.targets = []
    self.startup_options = collections.defaultdict(list)
    self.build_options = collections.defaultdict(
        list,
        {
            _OptionsParser.ALL_CONFIGS: [
                '--experimental_enable_objc_cc_deps',
                '--verbose_failures',
                '--announce_rc',
            ],

            'Debug': [
                '--compilation_mode=dbg',
            ],

            'Release': [
                '--compilation_mode=opt',
                '--apple_generate_dsym',
                '--strip=always',
            ],

            'Fastbuild': [
                '--compilation_mode=fastbuild',
            ],
        })

    # Options specific to debugger integration in Xcode.
    xcode_version_major = int(os.environ['XCODE_VERSION_MAJOR'])
    if xcode_version_major < 800:
      xcode_lldb_options = [
          '--copt=-Xclang', '--copt=-fdebug-compilation-dir',
          '--copt=-Xclang', '--copt=%s' % main_group_path,
          '--objccopt=-Xclang', '--objccopt=-fdebug-compilation-dir',
          '--objccopt=-Xclang', '--objccopt=%s' % main_group_path,
      ]
      self.build_options['Debug'].extend(xcode_lldb_options)
      self.build_options['Release'].extend(xcode_lldb_options)

    self.sdk_version = sdk_version
    self.platform_name = platform_name

    if arch:
      self.build_options[_OptionsParser.ALL_CONFIGS].append(
          '--config=ios_' + arch)

    self.verbose = 0
    self.install_generated_artifacts = False
    self.bazel_bin_path = 'bazel-bin'
    self.bazel_executable = None

  @staticmethod
  def _UsageMessage():
    """Returns a usage message string."""
    usage = textwrap.dedent("""\
      Usage: %s <target> [<target2> ...] --bazel <bazel_binary_path> [options]

      Where options are:
        --verbose [-v]
            Increments the verbosity of the script by one level. This argument
            may be provided multiple times to enable additional output levels.

        --unpack_generated_ipa
            Unzips the contents of the IPA artifact generated by this build.

        --bazel_startup_options <option1> [<option2> ...] --
            Provides one or more Bazel startup options.

        --bazel_options <option1> [<option2> ...] --
            Provides one or more Bazel build options.

        --bazel_bin_path <path>
            Path at which Bazel-generated artifacts may be retrieved.
      """ % sys.argv[0])

    usage += '\n' + textwrap.fill(
        'Note that the --bazel_startup_options and --bazel_options options may '
        'include an optional configuration specifier in brackets to limit '
        'their contents to a given build configuration. Options provided with '
        'no configuration filter will apply to all configurations in addition '
        'to any configuration-specific options.', 120)

    usage += '\n' + textwrap.fill(
        'E.g., --bazel_options common --  --bazel_options[Release] release -- '
        'would result in "bazel build common release" in the "Release" '
        'configuration and "bazel build common" in all other configurations.',
        120)

    return usage

  def ParseOptions(self, args):
    """Parses arguments, returning (message, exit_code)."""

    bazel_executable_index = args.index('--bazel')

    self.targets = args[:bazel_executable_index]
    if not self.targets or len(args) < bazel_executable_index + 2:
      return (self._UsageMessage(), 10)
    self.bazel_executable = args[bazel_executable_index + 1]

    return self._ParseVariableOptions(args[bazel_executable_index + 2:])

  def GetStartupOptions(self, config):
    """Returns the full set of startup options for the given config."""
    return self._GetOptions(self.startup_options, config)

  def GetBuildOptions(self, config):
    """Returns the full set of build options for the given config."""
    options = self._GetOptions(self.build_options, config)

    version_string = self._GetXcodeVersionString()
    if version_string:
      self._AddDefaultOption(options, '--xcode_version', version_string)

    if self.sdk_version:
      if self.platform_name == 'watchos':
        self._AddDefaultOption(options,
                               '--watchos_sdk_version',
                               self.sdk_version)
      else:
        # TODO(abaire): This will probably be incorrect in other cases.
        # SDK Version handling probably has to be kept in sync with
        # platform_name in a more generic manner in order to support new types
        # from Apple or Bazel.
        self._AddDefaultOption(options, '--ios_sdk_version', self.sdk_version)
    return options

  @staticmethod
  def _AddDefaultOption(option_list, option, default_value):
    matching_options = [opt for opt in option_list if opt.startswith(option)]
    if matching_options:
      return option_list

    option_list.append('%s=%s' % (option, default_value))
    return option_list

  @staticmethod
  def _GetOptions(option_set, config):
    """Returns a flattened list from options_set for the given config."""
    options = list(option_set[_OptionsParser.ALL_CONFIGS])
    if config != _OptionsParser.ALL_CONFIGS:
      options.extend(option_set[config])
    return options

  def _ParseVariableOptions(self, args):
    """Parses flag-based args, returning (message, exit_code)."""

    while args:
      arg = args[0]
      args = args[1:]

      if arg == '--verbose' or arg == '-v':
        self.verbose += 1

      elif arg == '--install_generated_artifacts':
        self.install_generated_artifacts = True

      elif arg.startswith('--bazel_startup_options'):
        config = self._ParseConfigFilter(arg)
        args, items, terminated = self._ParseDoubleDashDelimitedItems(args)
        if not terminated:
          return ('Missing "--" terminator while parsing %s' % arg, 2)
        duplicates = self._FindDuplicateOptions(self.startup_options,
                                                config,
                                                items)
        if duplicates:
          return (
              '%s items conflict with common options: %s' % (
                  arg, ','.join(duplicates)),
              2)
        self.startup_options[config].extend(items)

      elif arg.startswith('--bazel_options'):
        config = self._ParseConfigFilter(arg)
        args, items, terminated = self._ParseDoubleDashDelimitedItems(args)
        if not terminated:
          return ('Missing "--" terminator while parsing %s' % arg, 2)
        duplicates = self._FindDuplicateOptions(self.build_options,
                                                config,
                                                items)
        if duplicates:
          return (
              '%s items conflict with common options: %s' % (
                  arg, ','.join(duplicates)),
              2)
        self.build_options[config].extend(items)

      elif arg == '--bazel_bin_path':
        if not args:
          return ('Missing required parameter for %s' % arg, 2)
        self.bazel_bin_path = args[0]
        args = args[1:]

      else:
        return ('Unknown option "%s"\n%s' % (arg, self._UsageMessage()), 1)

    return (None, 0)

  @staticmethod
  def _ParseConfigFilter(arg):
    match = re.search(r'\[([^\]]+)\]', arg)
    if not match:
      return _OptionsParser.ALL_CONFIGS
    return match.group(1)

  @staticmethod
  def _ConsumeArgumentForParam(param, args):
    if not args:
      return (None, 'Missing required parameter for "%s" option' % param)
    val = args[0]
    return (args[1:], val)

  @staticmethod
  def _ParseDoubleDashDelimitedItems(args):
    """Consumes options until -- is found."""
    options = []
    terminator_found = False

    opts = args
    while opts:
      opt = opts[0]
      opts = opts[1:]
      if opt == '--':
        terminator_found = True
        break
      options.append(opt)

    return opts, options, terminator_found

  @staticmethod
  def _FindDuplicateOptions(options_dict, config, new_options):
    """Returns a list of options appearing in both given option lists."""

    allowed_duplicates = [
        '--copt',
        '--config',
        '--define',
        '--objccopt',
    ]

    def ExtractOptionNames(opts):
      names = set()
      for opt in opts:
        split_opt = opt.split('=', 1)
        if split_opt[0] not in allowed_duplicates:
          names.add(split_opt[0])
      return names

    current_set = ExtractOptionNames(options_dict[config])
    new_set = ExtractOptionNames(new_options)
    conflicts = current_set.intersection(new_set)

    if config != _OptionsParser.ALL_CONFIGS:
      current_set = ExtractOptionNames(options_dict[_OptionsParser.ALL_CONFIGS])
      conflicts = conflicts.union(current_set.intersection(new_set))
    return conflicts

  @staticmethod
  def _GetXcodeVersionString():
    """Returns Xcode version info from the environment as a string."""
    reported_version = os.environ['XCODE_VERSION_ACTUAL']
    match = re.match(r'(\d{2})(\d)(\d)$', reported_version)
    if not match:
      sys.stdout.write('Warning: Failed to extract Xcode version from %s\n' % (
          reported_version))
      sys.stdout.flush()
      return None
    major_version = int(match.group(1))
    minor_version = int(match.group(2))
    fix_version = int(match.group(3))
    fix_version_string = ''
    if fix_version:
      fix_version_string = '.%d' % fix_version
    return '%d.%d%s' % (major_version, minor_version, fix_version_string)


class BazelBuildBridge(object):
  """Handles invoking Bazel and unpacking generated binaries."""

  # Tuple of paths that are allowed as siblings of the Payload directory in IPA
  # bundles.
  _IPA_SUPPORT_DIRECTORIES = ('WatchKitSupport', 'SwiftSupport')

  def __init__(self):
    self.verbose = 0
    self.build_path = None
    self.bazel_bin_path = None
    self.bazel_genfiles_path = None
    self.signing_identities = {}

    # Certain potentially expensive patchups need to be made for non-Xcode IDE
    # integrations. There isn't a fool-proof way of determining if the script is
    # being used with Xcode or not, but searching the CODESIGNING_FOLDER_PATH
    # env var for "/Xcode/" should catch the majority of use-cases.
    self.codesigning_folder_path = os.environ['CODESIGNING_FOLDER_PATH']
    self.likely_xcode = self.codesigning_folder_path.find('/Xcode/') != -1

    # Check to see if code signing actions should be skipped or not.
    codesigning_allowed = os.environ.get('CODE_SIGNING_ALLOWED', 'NO')
    self.codesigning_allowed = codesigning_allowed == 'YES'

    self.xcode_action = os.environ['ACTION']  # The Xcode build action.
    # When invoked as an external build system script, Xcode will set ACTION to
    # an empty string.
    if not self.xcode_action:
      self.xcode_action = 'build'

    self.arch = os.environ.get('CURRENT_ARCH')  # Target architecture.
    # Declared outputs of the target.
    self.bazel_outputs = os.environ.get('BAZEL_OUTPUTS', [])
    if self.bazel_outputs:
      self.bazel_outputs = self.bazel_outputs.split('\n')
    # Bazel's notion of the type of artifact being generated.
    self.bazel_target_type = os.environ.get('BAZEL_TARGET_TYPE')
    # Path into which generated artifacts should be copied.
    self.built_products_dir = os.environ['BUILT_PRODUCTS_DIR']
    # The full name of the target artifact (e.g., "MyApp.app" or "Test.xctest").
    self.full_product_name = os.environ['FULL_PRODUCT_NAME']
    # Target SDK version.
    self.sdk_version = os.environ.get('SDK_VERSION')
    # The TEST_HOST for unit tests.
    self.test_host_binary = os.environ.get('TEST_HOST')
    # The UTI type of the target.
    self.package_type = os.environ.get('PACKAGE_TYPE')
    self.platform_name = os.environ['PLATFORM_NAME']  # Target platform.
    # The name (without any extension) of the target artifact.
    self.product_name = os.environ['PRODUCT_NAME']
    # The type of the target artifact.
    self.product_type = os.environ['PRODUCT_TYPE']
    # The path to the parent of the xcodeproj bundle.
    self.project_dir = os.environ['PROJECT_DIR']
    # The path to the xcodeproj bundle.
    self.project_file_path = os.environ['PROJECT_FILE_PATH']
    # Path to the directory containing the WORKSPACE file.
    self.workspace_root = os.path.abspath(os.environ['TULSI_WR'])
    # Set to the name of the generated bundle for bundle-type targets, None for
    # single file targets (like static libraries).
    self.wrapper_name = os.environ.get('WRAPPER_NAME')
    self.xcode_version_major = int(os.environ['XCODE_VERSION_MAJOR'])
    self.xcode_version_minor = int(os.environ['XCODE_VERSION_MINOR'])

    self.main_group_path = os.getcwd()

  def Run(self, args):
    """Executes a Bazel build based on the environment and given arguments."""
    if self.xcode_action != 'build':
      sys.stderr.write('Xcode action is %s, ignoring.' % self.xcode_action)
      return 0

    parser = _OptionsParser(self.sdk_version,
                            self.platform_name,
                            self.arch,
                            self.main_group_path)
    timer = Timer('Parsing options').Start()
    message, exit_code = parser.ParseOptions(args[1:])
    timer.End()
    if exit_code:
      self._PrintError('Option parsing failed: %s' % message)
      return exit_code

    self.verbose = parser.verbose
    self.bazel_bin_path = os.path.abspath(parser.bazel_bin_path)
    # bazel_bin_path is assumed to always end in "-bin" and the genfiles symlink
    # should always share the bin symlink's prefix.
    self.bazel_genfiles_path = self.bazel_bin_path[:-3] + 'genfiles'

    self.build_path = os.path.join(self.bazel_bin_path,
                                   os.environ.get('TULSI_BUILD_PATH', ''))
    (command, retval) = self._BuildBazelCommand(parser)
    if retval:
      return retval

    timer = Timer('Running Bazel').Start()
    exit_code = self._RunBazelAndPatchOutput(command)
    timer.End()
    if exit_code:
      self._PrintError('Bazel build failed.')
      return exit_code

    exit_code = self._EnsureBazelBinSymlinkIsValid()
    if exit_code:
      self._PrintError('Failed to ensure existence of bazel-bin directory.')
      return exit_code

    if parser.install_generated_artifacts:
      timer = Timer('Installing artifacts').Start()
      exit_code = self._InstallArtifact()
      timer.End()
      if exit_code:
        return exit_code

      timer = Timer('Installing DSYM bundles').Start()
      exit_code = self._InstallDSYMBundles(self.built_products_dir)
      timer.End()
      if exit_code:
        return exit_code

      # Starting with Xcode 7.3, XCTests inject several supporting frameworks
      # into the test host that need to be signed with the same identity as
      # the host itself.
      if (self.test_host_binary and self.xcode_version_minor >= 730 and
          self.platform_name != 'iphonesimulator'):
        test_host_bundle = os.path.dirname(self.test_host_binary)
        timer = Timer('Re-signing injected test host artifacts').Start()
        exit_code = self._ResignTestHost(test_host_bundle)
        timer.End()
        if exit_code:
          return exit_code

    if self.xcode_version_major >= 800:
      exit_code = self._UpdateLLDBInit()
      if exit_code:
        return exit_code

    return 0

  def _BuildBazelCommand(self, options):
    """Builds up a commandline string suitable for running Bazel."""
    bazel_command = [options.bazel_executable]

    configuration = os.environ['CONFIGURATION']
    # Treat the special testrunner build config as a Debug compile.
    test_runner_config_prefix = '__TulsiTestRunner_'
    if configuration.startswith(test_runner_config_prefix):
      configuration = configuration[len(test_runner_config_prefix):]
    elif os.environ.get('TULSI_TEST_RUNNER_ONLY') == 'YES':
      self._PrintError('Building test targets with configuration "%s" is not '
                       'allowed. Please use the "Test" action instead.' %
                       configuration)
      return (None, 1)

    if configuration not in _OptionsParser.KNOWN_CONFIGS:
      self._PrintError('Unknown build configuration "%s"' % configuration)
      return (None, 1)

    bazel_command.extend(options.GetStartupOptions(configuration))
    bazel_command.append('build')
    bazel_command.extend(options.GetBuildOptions(configuration))
    bazel_command.extend(options.targets)

    return (bazel_command, 0)

  def _RunBazelAndPatchOutput(self, command):
    """Runs subprocess command, patching output as it's received."""
    self._PrintVerbose('Running "%s", patching output for main group path at '
                       '"%s" with project path at "%s".' %
                       (' '.join(command),
                        self.main_group_path,
                        self.project_dir))
    # Xcode translates anything that looks like ""<path>:<line>:" that is not
    # followed by the word "warning" into an error. Bazel warnings do not fit
    # this scheme and must be patched here.
    bazel_warning_line_regex = re.compile(
        r'WARNING: ([^:]+:\d+:(?:\d+:)?)\s+(.+)')

    def PatchBazelWarningStatements(output_line):
      match = bazel_warning_line_regex.match(output_line)
      if match:
        output_line = '%s warning: %s' % (match.group(1), match.group(2))
      return output_line

    patch_xcode_parsable_line = PatchBazelWarningStatements
    if self.main_group_path != self.project_dir:
      # Match (likely) filename:line_number: lines.
      xcode_parsable_line_regex = re.compile(r'([^/][^:]+):\d+:')

      def PatchOutputLine(output_line):
        output_line = PatchBazelWarningStatements(output_line)
        if xcode_parsable_line_regex.match(output_line):
          output_line = '%s/%s' % (self.main_group_path, output_line)
        return output_line
      patch_xcode_parsable_line = PatchOutputLine

    process = subprocess.Popen(command,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.STDOUT,
                               bufsize=1)
    linebuf = ''
    while process.returncode is None:
      for line in process.stdout.readline():
        # Occasionally Popen's line-buffering appears to break down. Not
        # entirely certain why this happens, but we use an accumulator to
        # try to deal with it.
        if not line.endswith('\n'):
          linebuf += line
          continue
        line = patch_xcode_parsable_line(linebuf + line)
        linebuf = ''
        sys.stdout.write(line)
        sys.stdout.flush()
      process.poll()

    output, _ = process.communicate()
    output = linebuf + output
    for line in output.split('\n'):
      line = patch_xcode_parsable_line(line)
      print line

    return process.returncode

  def _EnsureBazelBinSymlinkIsValid(self):
    """Ensures that the Bazel output symlink points at a real directory."""

    if not os.path.islink(self.bazel_bin_path):
      self._PrintWarning('Bazel output symlink at "%s" non-existent' %
                         (self.bazel_bin_path))
      return 0

    real_path = os.path.realpath(self.bazel_bin_path)
    if not os.path.isdir(real_path):
      try:
        os.makedirs(real_path)
      except OSError as e:
        self._PrintError('Failed to create Bazel binary dir at "%s". %s' %
                         (real_path, e))
        return 20
    return 0

  def _InstallArtifact(self):
    """Installs Bazel-generated artifacts into the Xcode output directory."""
    xcode_artifact_path = self.codesigning_folder_path

    if os.path.isdir(xcode_artifact_path):
      try:
        shutil.rmtree(xcode_artifact_path)
      except OSError as e:
        self._PrintError('Failed to remove stale output directory ""%s". '
                         '%s' % (xcode_artifact_path, e))
        return 600
    elif os.path.isfile(xcode_artifact_path):
      try:
        os.remove(xcode_artifact_path)
      except OSError as e:
        self._PrintError('Failed to remove stale output file ""%s". '
                         '%s' % (xcode_artifact_path, e))
        return 600

    expected_basename = os.path.basename(xcode_artifact_path)
    _, expected_extension = os.path.splitext(expected_basename)
    matching_artifact = None

    # Attempt to heuristically determine which output matches Xcode's
    # expectation. Outputs are evaluated in the following priority order:
    # 1) output name == expected name
    # 2) output extension == expected extension
    # 3) output extension == '.ipa', in which case the IPA should be extracted
    for output in self.bazel_outputs:
      output_basename = os.path.basename(output)
      if output_basename == expected_basename:
        matching_artifact = output
        break

      _, output_extension = os.path.splitext(output_basename)
      if output_extension == expected_extension:
        matching_artifact = output
      elif output_extension == '.ipa' and not matching_artifact:
        matching_artifact = output

    if not matching_artifact:
      self._PrintError(
          'Failed to find an output artifact for target %s in candidates %r' %
          (xcode_artifact_path, self.bazel_outputs))
      return 601

    if matching_artifact.endswith('.ipa'):
      exit_code = self._UnpackTarget(matching_artifact, xcode_artifact_path)
      if exit_code:
        return exit_code

      exit_code = self._UpdateInfoPlistIfNecessary(xcode_artifact_path)
      if exit_code:
        return exit_code
    elif os.path.isfile(matching_artifact):
      exit_code = self._CopyFile(os.path.basename(matching_artifact),
                                 matching_artifact,
                                 xcode_artifact_path)
      if exit_code:
        return exit_code
    else:
      self._CopyBundle(os.path.basename(matching_artifact),
                       matching_artifact,
                       xcode_artifact_path)

    return 0

  def _CopyBundle(self, source_path, full_source_path, output_path):
    """Copies the given bundle to the given expected output path."""
    self._PrintVerbose('Copying %s to %s' % (source_path, output_path))
    try:
      shutil.copytree(full_source_path, output_path)
    except OSError as e:
      self._PrintError('Copy failed. %s' % e)
      return 650
    return 0

  def _CopyFile(self, source_path, full_source_path, output_path):
    """Copies the given file to the given expected output path."""
    self._PrintVerbose('Copying %s to %s' % (source_path, output_path))
    output_path_dir = os.path.dirname(output_path)
    if not os.path.exists(output_path_dir):
      try:
        os.makedirs(output_path_dir)
      except OSError as e:
        self._PrintError('Failed to create output directory ""%s". '
                         '%s' % (output_path_dir, e))
        return 650
    try:
      shutil.copy(full_source_path, output_path)
    except OSError as e:
      self._PrintError('Copy failed. %s' % e)
      return 650
    return 0

  def _UnpackTarget(self, ipa_path, output_path):
    """Unpacks generated IPA into the given expected output path."""
    self._PrintVerbose('Unpacking %s to %s' % (ipa_path, output_path))

    if not os.path.isfile(ipa_path):
      self._PrintError('Generated IPA not found at "%s"' % ipa_path)
      return 670

    # IPA file contents will be something like Payload/<app>.app/...
    # The base of the dirname within the Payload must match the last
    # component of output_path.
    expected_bundle_name = os.path.basename(output_path)
    if self.package_type == 'com.apple.package-type.app-extension':
      expected_ipa_subpath = os.path.join('PlugIns', expected_bundle_name)
    elif self.product_type == 'com.apple.product-type.application.watchapp2':
      # apple_watch2_extension apps generate an IPA whose name does not
      # necessarily match the Bazel target (it uses the app_name attribute).
      # Tulsi guarantees that the first BAZEL_OUTPUTS value is the primary
      # artifact so, rather than using the rule name, the first output is used.
      if self.bazel_outputs:
        expected_bundle_name = os.path.splitext(
            os.path.basename(self.bazel_outputs[0]))[0] + '.app'
      expected_ipa_subpath = os.path.join('Watch', expected_bundle_name)
    else:
      expected_ipa_subpath = os.path.join('Payload', expected_bundle_name)

    with zipfile.ZipFile(ipa_path, 'r') as zf:
      for item in zf.infolist():
        filename = item.filename

        # Support directories do not seem to be needed by the debugger and are
        # skipped.
        if filename.startswith(self._IPA_SUPPORT_DIRECTORIES):
          continue

        if len(filename) < len(expected_ipa_subpath):
          continue

        attributes = (item.external_attr >> 16) & 0777
        self._PrintVerbose('Extracting %s (%o)' % (filename, attributes),
                           level=1)

        if not filename.startswith(expected_ipa_subpath):
          # TODO(abaire): Make an error if Bazel modifies this behavior.
          self._PrintWarning('Mismatched extraction path. IPA content at '
                             '"%s" expected to have subpath of "%s"' %
                             (filename, expected_ipa_subpath))

        dir_components = self._SplitPathComponents(filename)

        # Get the file's path, ignoring the payload components.
        subpath = os.path.join(*dir_components[2:])
        target_path = os.path.join(output_path, subpath)

        # Ensure the target directory exists.
        try:
          target_dir = os.path.dirname(target_path)
          if not os.path.isdir(target_dir):
            os.makedirs(target_dir)
        except OSError as e:
          self._PrintError(
              'Failed to create target path "%s" during extraction. %s' % (
                  target_path, e))
          return 671

        # If the archive item looks like a file, extract it.
        if not filename.endswith(os.sep):
          with zf.open(item) as src, file(target_path, 'wb') as dst:
            shutil.copyfileobj(src, dst)

        # Patch up the extracted file's attributes to match the zip content.
        if attributes:
          os.chmod(target_path, attributes)

    return 0

  def _UpdateInfoPlistIfNecessary(self, output_path):
    """Runs plutil to rewrite the Info.plist file to support various tools."""

    # Specifically, AppCode 2016 fails to parse the Info.plist generated by
    # Bazel. Doing a plutil to convert it to INFOPLIST_OUTPUT_FORMAT (which
    # should be a nop since the env var is typically "binary" and the plist
    # should already be binary) fixes the issue. This fix is expensive (at
    # least two external tool invokes) so it's skipped in the Xcode case.
    if self.likely_xcode:
      return 0

    infoplist_path = os.environ.get('INFOPLIST_PATH', None)
    if not infoplist_path:
      return 0

    bundle_parent, bundle_name = os.path.split(output_path)
    if not infoplist_path.startswith(bundle_name):
      self._PrintWarning('Mismatch in bundle output name ("%s") and '
                         'Info.plist subpath ("%s"). Info.plist file will not '
                         'be modified and may lead to a failure.' % (
                             output_path, infoplist_path))
      return 0

    infoplist_full_path = os.path.join(bundle_parent, infoplist_path)
    # Note that the tool expects "<type>1", e.g., "binary1" but the env var is
    # of the form "<type>".
    fmt = os.environ.get('INFOPLIST_OUTPUT_FORMAT', 'binary') + '1'
    timer = Timer('\tUpdating plist').Start()
    command = ['xcrun',
               'plutil',
               '-convert',
               fmt,
               infoplist_full_path]
    process = subprocess.Popen(command,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.STDOUT)
    stdout, _ = process.communicate()
    timer.End()
    if process.returncode:
      self._PrintWarning('Plist conversion command %r failed. %s' % (
          command, stdout))
      return 100 + process.returncode

    signing_identity = self._ExtractSigningIdentity(output_path)
    if not signing_identity:
      return 800
    return self._ResignBundle(output_path, signing_identity)

  def _InstallDSYMBundles(self, output_dir):
    """Copies any generated dSYM bundles to the given directory."""
    # TODO(abaire): Support mapping the dSYM generated for an obc_binary.
    # ios_application's will have a dSYM generated with the linked obj_binary's
    # filename, so the target_dsym will never actually match.
    target_dsym = os.environ.get('DWARF_DSYM_FILE_NAME', None)
    output_full_path = os.path.join(output_dir, target_dsym)
    if os.path.isdir(output_full_path):
      try:
        shutil.rmtree(output_full_path)
      except OSError as e:
        self._PrintError('Failed to remove stale output dSYM bundle ""%s". '
                         '%s' % (output_full_path, e))
        return 700

    input_dsym_full_path = os.path.join(self.build_path, target_dsym)
    if os.path.isdir(input_dsym_full_path):
      return self._CopyBundle(target_dsym,
                              input_dsym_full_path,
                              output_full_path)

    if 'BAZEL_BINARY_DSYM' in os.environ:
      # TODO(abaire): Remove this hack once Bazel generates dSYMs for
      #               ios_application/etc... bundles instead of their
      #               contained binaries.
      bazel_dsym_path = os.environ['BAZEL_BINARY_DSYM']
      build_path_prefix = os.environ.get('TULSI_BUILD_PATH', '')
      if bazel_dsym_path.startswith(build_path_prefix):
        bazel_dsym_path = bazel_dsym_path[len(build_path_prefix) + 1:]
      input_dsym_full_path = os.path.join(self.build_path, bazel_dsym_path)
      if os.path.isdir(input_dsym_full_path):
        return self._CopyBundle(bazel_dsym_path,
                                input_dsym_full_path,
                                output_full_path)
    return 0

  def _ResignTestHost(self, test_host):
    """Re-signs the support frameworks in the given test host bundle."""
    if not self.codesigning_allowed:
      return 0

    signing_identity = self._ExtractSigningIdentity(test_host)
    if not signing_identity:
      return 800
    exit_code = self._ResignBundle(os.path.join(test_host,
                                                'Frameworks',
                                                'IDEBundleInjection.framework'),
                                   signing_identity)
    if exit_code != 0:
      return exit_code

    exit_code = self._ResignBundle(os.path.join(test_host,
                                                'Frameworks',
                                                'XCTest.framework'),
                                   signing_identity)
    if exit_code != 0:
      return exit_code
    # Note that Xcode 7.3 also re-signs the test_host itself, but this does
    # not appear to be necessary in the Bazel-backed case.
    return 0

  def _ResignBundle(self, bundle_path, signing_identity):
    """Re-signs the given path with a given signing identity."""
    if not self.codesigning_allowed:
      return 0

    timer = Timer('\tSigning ' + bundle_path).Start()
    command = [
        'xcrun',
        'codesign',
        '-f',
        '--preserve-metadata=identifier,entitlements',
        '--timestamp=none',
        '-s',
        signing_identity,
        bundle_path,
    ]
    returncode, output = self._RunSubprocess(command)
    timer.End()
    if returncode:
      self._PrintError('Re-sign command %r failed. %s' % (command, output))
      return 800 + returncode
    return 0

  def _ExtractSigningIdentity(self, signed_bundle):
    """Returns the identity used to sign the given bundle path."""
    if not self.codesigning_allowed:
      return '<CODE_SIGNING_ALLOWED=NO>'

    cached = self.signing_identities.get(signed_bundle)
    if cached:
      return cached

    timer = Timer('\tExtracting signature for ' + signed_bundle).Start()
    output = subprocess.check_output(['xcrun',
                                      'codesign',
                                      '-dvv',
                                      signed_bundle],
                                     stderr=subprocess.STDOUT)
    timer.End()
    for line in output.split('\n'):
      if line.startswith('Authority='):
        identity = line[10:]
        self.signing_identities[signed_bundle] = identity
        return identity
    self._PrintError('Failed to extract signing identity from %s' % output)
    return None

  def _UpdateLLDBInit(self):
    """Updates ~/.lldbinit-Xcode to enable debugging of Bazel binaries."""
    timer = Timer(
        '\tExtracting source paths for ' + self.full_product_name).Start()

    source_paths = self._ExtractTargetSourcePaths()
    timer.End()
    if source_paths is None:
      self._PrintWarning('Failed to extract source paths for LLDB. File-based '
                         'breakpoints will likely not work.')
      return 900

    if not source_paths:
      self._PrintWarning('Extracted 0 source paths from %r. File-based '
                         'breakpoints may not work. Please report as a bug.' %
                         self.full_product_name)
      return 0

    lldbinit_path = os.path.expanduser('~/.lldbinit-Xcode')
    with tempfile.NamedTemporaryFile(dir=os.path.dirname(lldbinit_path),
                                     delete=False) as out:

      block_start = '# <TULSI> LLDB bridge [:\n'
      block_end = '# ]: <TULSI> LLDB bridge\n'

      # Preserve the contents of any existing .lldbinit.
      if os.path.isfile(lldbinit_path):
        with open(lldbinit_path) as f:
          ignoring = False
          for line in f:
            if ignoring:
              if line == block_end:
                ignoring = False
              continue
            if line == block_start:
              ignoring = True
              continue
            out.write(line)

      # Append the source-map settings for this project.
      out.write(block_start)
      out.write('# This was autogenerated by Tulsi and is used to map file '
                'paths used by Bazel to those used by %r.\n' %
                os.path.basename(self.project_file_path))
      workspace_root_parent = os.path.dirname(self.workspace_root)

      source_maps = []
      for p, symlink in source_paths:
        if symlink:
          local_path = os.path.join(workspace_root_parent, symlink)
        else:
          local_path = workspace_root_parent
        source_maps.append('"%s" "%s"' % (p, local_path))
      source_maps.sort(reverse=True)

      out.write('settings set target.source-map %s\n' % ' '.join(source_maps))
      out.write(block_end)

    shutil.move(out.name, lldbinit_path)

    return 0

  def _ExtractTargetSourcePaths(self):
    """Extracts set((source paths, symlink)) from the target's debug symbols.

    Returns:
      None: if an error occurred.
      set(str): containing tuples of unique source paths in the target binary
                associated with the symlink used by Tulsi generated Xcode
                projects if applicable. For example, a source path to a
                /genfiles/ directory will be associated with "bazel-genfiles".
    """
    if os.path.isfile(self.codesigning_folder_path):
      binary_path = self.codesigning_folder_path
    else:
      binary_path = os.path.join(self.codesigning_folder_path,
                                 self.product_name)

    if not os.path.isfile(binary_path):
      self._PrintWarning('No binary at expected path %r' % binary_path)
      return None

    returncode, output = self._RunSubprocess([
        'xcrun',
        'dsymutil',
        '-s',
        binary_path
    ])
    if returncode:
      self._PrintWarning('dsymutil returned %d while examining symtable for %r'
                         % (returncode, binary_path))
      return None

    # Symbol table lines of interest are of the form:
    #  [index] n_strx (N_SO ) n_sect n_desc n_value 'source_path'
    # where source_path is an absolute path (rather than a filename). There are
    # several paths of interest:
    # The path up to "/bin/" is mapped to bazel-bin.
    # The path up to "/genfiles/" is mapped to bazel-genfiles.
    # The path up to "execroot" covers any other cases.
    source_path_re = re.compile(
        r'\[\s*\d+\]\s+.+?\(N_SO\s*\)\s+.+?\'(/.+?/execroot)/(.*?)\'\s*$')
    source_path_prefixes = set()

    for line in output.split('\n'):
      match = source_path_re.match(line)
      if match:
        basepath = match.group(1)
        # Subpaths of interest will be of the form
        # <workspace>/bazel-out/<arch>-<mode>/<interesting_bit>/...
        subpath = match.group(2)
        components = subpath.split(os.sep, 5)
        if len(components) >= 4 and components[1] == 'bazel-out':
          symlink_component = components[3]
          match_path = os.path.join(basepath, *components[:4])
          if symlink_component == 'bin':
            source_path_prefixes.add((match_path, self.bazel_bin_path))
            continue
          if symlink_component == 'genfiles':
            source_path_prefixes.add((match_path, self.bazel_genfiles_path))
            continue

        source_path_prefixes.add((basepath, None))

    return source_path_prefixes

  @staticmethod
  def _SplitPathComponents(path):
    """Splits the given path into an array of all of its components."""
    components = path.split(os.sep)
    # Patch up the first component if path started with an os.sep
    if not components[0]:
      components[0] = os.sep
    return components

  @staticmethod
  def _RunSubprocess(cmd):
    """Runs the given command as a subprocess, returning (exit_code, output)."""
    process = subprocess.Popen(cmd,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.STDOUT)
    output, _ = process.communicate()
    return (process.returncode, output)

  def _PrintVerbose(self, msg, level=0):
    if self.verbose > level:
      sys.stdout.write(msg + '\n')
      sys.stdout.flush()

  @staticmethod
  def _PrintWarning(msg):
    sys.stdout.write(':: warning: %s\n' % msg)
    sys.stdout.flush()

  @staticmethod
  def _PrintError(msg):
    sys.stderr.write(':: Error: %s\n' % msg)
    sys.stderr.flush()


if __name__ == '__main__':
  _timer = Timer('Everything').Start()
  _exit_code = BazelBuildBridge().Run(sys.argv)
  _timer.End()
  sys.exit(_exit_code)
